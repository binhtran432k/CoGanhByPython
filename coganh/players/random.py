import random

decodedBoardHelper = [[[(0, 1), (1, 1), (1, 0)],
[(0, 2), (1, 1), (0, 0)],
[(0, 3), (1, 2), (0, 1), (1, 3), (1, 1)],
[(0, 4), (1, 3), (0, 2)],
[(1, 4), (1, 3), (0, 3)]],
[[(0, 0), (1, 1), (2, 0)],
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)],
[(0, 2), (1, 1), (1, 3), (2, 2)],
[(0, 2), (0, 3), (0, 4), (1, 2), (1, 4), (2, 2), (2, 3), (2, 4)],
[(2, 4), (1, 3), (0, 4)]],
[[(1, 0), (2, 1), (3, 0), (1, 1), (3, 1)],
[(1, 1), (2, 0), (2, 2), (3, 1)],
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2), (3, 3)],
[(1, 3), (2, 2), (2, 4), (3, 3)],
[(3, 4), (2, 3), (1, 4), (3, 3), (1, 3)]],
[[(2, 0), (3, 1), (4, 0)],
[(2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2)],
[(2, 2), (3, 1), (3, 3), (4, 2)],
[(2, 2), (2, 3), (2, 4), (3, 2), (3, 4), (4, 2), (4, 3), (4, 4)],
[(4, 4), (3, 3), (2, 4)]],
[[(3, 0), (3, 1), (4, 1)],
[(4, 0), (3, 1), (4, 2)],
[(4, 1), (3, 2), (4, 3), (3, 1), (3, 3)],
[(4, 2), (3, 3), (4, 4)],
[(4, 3), (3, 3), (3, 4)]]]

def move(board, player):
    print(board)
    f = None
    while f is None:
        for i in range(5):
            for j in range(5):
                if board[i][j] == player:
                    dB = [x for x in decodedBoardHelper[i][j] if board[x[0]][x[1]] == 0]
                    rand = random.randint(0, 1)
                    if rand >= 0.5 and len(dB) > 0:
                        f = (i, j)
                        break
            if f is not None:
                break
    print(decodedBoardHelper[f[0]][f[1]])
    print(dB)
    t = random.choice(dB)
    return (f, t)